import os
import asyncio
import re
from openai import OpenAI
from typing import List

# Load OpenAI API key
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

prompt_generator_id = "asst_OKSpeJarTI3OKn18n0ftVVSL"

# load open ai client
client = OpenAI(api_key=OPENAI_API_KEY)

def upload_file(file_path):
    """Uploads a file to OpenAI's servers returns file ID"""
    try:
       response = client.files.create(
           file=open(file_path, 'rb'),
           purpose='assistants')
       return response.id
        
    except Exception as e:
        print(f"Error uploading file: {e}")
        return None
    
# Generates a prompt for the teacher assistant
def generate_prompt(file_ids: List[str], description: str) -> str:

    prompt = " Generate a prompt to make a LLM act as a helpful computer science teacher assistant with a goal to help a student who is working on a coding project. Here is a brief description of the project: " + description +  ". The README.md file is also attached read it to gain more background about the project. I want the ai to not just give out answer to the project but help the student understand and be able able to complete the task. Mention to the ai that it has access to the completed project."
    thread = client.beta.threads.create()
    

    message = client.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        content=prompt,
        file_ids=file_ids)
    
    run = client.beta.threads.runs.create(
        thread_id=thread.id,
        assistant_id=prompt_generator_id
    )

    runStatus = client.beta.threads.runs.retrieve(
    thread_id=thread.id,
    run_id=run.id)

    # Wait until the run is completed 
    while (runStatus.status != "completed"):
        #wait for run to complete
        runStatus = client.beta.threads.runs.retrieve(
        thread_id=thread.id,
        run_id=run.id)

        print("Run status: " + runStatus.status)

        if (runStatus.status == "failed"):
            print("Run failed")
            return None

        
    # Get the prompt generated by the ai
    messages = client.beta.threads.messages.list(thread_id=thread.id)

    generated_prompt = messages.data[0].content[0].text.value

    # format the respose using regex
    pattern = r'"(.*?)"'
    prompt = re.findall(pattern, generated_prompt)

    if len(prompt) == 0:
        return None
    
    return prompt[0]



# Creates a new teacher assistant for a given project
def create_teacher_assistant(file_ids: List[str], name: str, readme_file: List[str], project_description: str) -> str:

    # Generate a tailored prompt for the teacher assistant
    ta_prompt = None
    while ta_prompt == None:
        ta_prompt = generate_prompt(readme_file, project_description)

    # Create a new teacher assistant
    ta = client.beta.assistants.create(
        name=name,
        instructions=ta_prompt,
        model = 'gpt-4-1106-preview',
        tools = [{"type":"retrieval"}, {"type":"code_interpreter"}],
        file_ids=file_ids)
    
    return ta.id

# Creates new thread
def create_thread() -> str:
    thread = client.beta.threads.create()
    return thread.id


# Asks a question to and existing teacher assistant
def ask_question(ta_id: str,thread_id: str, question: str, file_ids : List[str] = []) -> str:

    message = client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=question,
        file_ids=file_ids)
    
    run = client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=ta_id)
    
    runStatus = client.beta.threads.runs.retrieve(
        thread_id=thread_id,
        run_id=run.id)
    
    while (runStatus.status != "completed"):
        #wait for run to complete
        runStatus = client.beta.threads.runs.retrieve(
        thread_id=thread_id,
        run_id=run.id)

        print("Run status: " + runStatus.status)

        if (runStatus.status == "failed"):
            print("Run failed")
            return None
        

    message_list = client.beta.threads.messages.list(thread_id=thread_id)

    res = message_list.data[0].content[0].text.value

    return res


#file_id = ["file-fWJXDoxJq7x0oyJIAKC6nw31"]
#description = "Blackjack Game"
#rompt = generate_prompt(file_id, description)
#print(prompt)

#ta_id = create_teacher_assistant(file_id, "Blackjack Game", file_id, description)

#ta_id = "asst_X2e5fUMlGtTA1th9pNAKn4k3"

#thread = create_thread()

#question = "how many cards in blackjack?"

#res = ask_question(ta_id, thread, question)

#print(res)


    

    







    


    



    

    





    

